{"ast":null,"code":"import { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport { toast } from \"react-toastify\";\nimport history from \"../../../services/history\";\nimport api from \"../../../services/api\";\nimport { loginSuccess, loginFailure } from \"./actions\";\nexport function* login({\n  payload\n}) {\n  console;\n\n  try {\n    const {\n      email,\n      password\n    } = payload;\n    const response = yield call(api.post, \"api/login\", {\n      email,\n      password\n    });\n    const {\n      token,\n      user\n    } = response.data;\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n    yield put(loginSuccess(token, user));\n    history.push(\"/main\");\n  } catch (err) {\n    toast.error(\"Falha na autenticação, verifique seus dados\");\n    yield put(loginFailure());\n  }\n}\nexport function* createUser({\n  payload\n}) {\n  try {\n    const {\n      name,\n      email,\n      password,\n      type,\n      cpf\n    } = payload;\n    yield call(api.post, \"users\", {\n      name,\n      email,\n      password,\n      type,\n      cpf\n    });\n    history.push(\"/\");\n  } catch (err) {\n    toast.error(\"Falha no cadastro, verifique os dados !\");\n    yield put(loginFailure());\n  }\n}\nexport function setToken({\n  payload\n}) {\n  if (!payload) return;\n  const {\n    token\n  } = payload.auth;\n\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\nexport function signOut() {\n  history.push(\"/\");\n}\nexport default all([takeLatest(\"persist/REHYDRATE\", setToken), takeLatest(\"@auth/LOGIN_REQUEST\", login), takeLatest(\"@auth/CREATE_USER_REQUEST\", createUser), takeLatest(\"@auth/SIGN_OUT\", signOut)]);","map":{"version":3,"sources":["/Users/fabiolucaslima/Dev/react_order/hirata/src/store/modules/auth/sagas.js"],"names":["takeLatest","call","put","all","toast","history","api","loginSuccess","loginFailure","login","payload","console","email","password","response","post","token","user","data","defaults","headers","Authorization","push","err","error","createUser","name","type","cpf","setToken","auth","signOut"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,WAA3C;AAEA,OAAO,UAAUC,KAAV,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA6B;AAClCC,EAAAA,OAAO;;AACP,MAAI;AACF,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBH,OAA5B;AACA,UAAMI,QAAQ,GAAG,MAAMb,IAAI,CAACK,GAAG,CAACS,IAAL,EAAW,WAAX,EAAwB;AACjDH,MAAAA,KADiD;AAEjDC,MAAAA;AAFiD,KAAxB,CAA3B;AAIA,UAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBH,QAAQ,CAACI,IAAjC;AACAZ,IAAAA,GAAG,CAACa,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASL,KAAM,EAArD;AACA,UAAMd,GAAG,CAACK,YAAY,CAACS,KAAD,EAAQC,IAAR,CAAb,CAAT;AACAZ,IAAAA,OAAO,CAACiB,IAAR,CAAa,OAAb;AACD,GAVD,CAUE,OAAOC,GAAP,EAAY;AACZnB,IAAAA,KAAK,CAACoB,KAAN,CAAY,6CAAZ;AACA,UAAMtB,GAAG,CAACM,YAAY,EAAb,CAAT;AACD;AACF;AACD,OAAO,UAAUiB,UAAV,CAAqB;AAAEf,EAAAA;AAAF,CAArB,EAAkC;AACvC,MAAI;AACF,UAAM;AAAEgB,MAAAA,IAAF;AAAQd,MAAAA,KAAR;AAAeC,MAAAA,QAAf;AAAyBc,MAAAA,IAAzB;AAA+BC,MAAAA;AAA/B,QAAuClB,OAA7C;AAEA,UAAMT,IAAI,CAACK,GAAG,CAACS,IAAL,EAAW,OAAX,EAAoB;AAC5BW,MAAAA,IAD4B;AAE5Bd,MAAAA,KAF4B;AAG5BC,MAAAA,QAH4B;AAI5Bc,MAAAA,IAJ4B;AAK5BC,MAAAA;AAL4B,KAApB,CAAV;AAQAvB,IAAAA,OAAO,CAACiB,IAAR,CAAa,GAAb;AACD,GAZD,CAYE,OAAOC,GAAP,EAAY;AACZnB,IAAAA,KAAK,CAACoB,KAAN,CAAY,yCAAZ;AAEA,UAAMtB,GAAG,CAACM,YAAY,EAAb,CAAT;AACD;AACF;AAED,OAAO,SAASqB,QAAT,CAAkB;AAAEnB,EAAAA;AAAF,CAAlB,EAA+B;AACpC,MAAI,CAACA,OAAL,EAAc;AACd,QAAM;AAAEM,IAAAA;AAAF,MAAYN,OAAO,CAACoB,IAA1B;;AACA,MAAId,KAAJ,EAAW;AACTV,IAAAA,GAAG,CAACa,QAAJ,CAAaC,OAAb,CAAqBC,aAArB,GAAsC,UAASL,KAAM,EAArD;AACD;AACF;AACD,OAAO,SAASe,OAAT,GAAmB;AACxB1B,EAAAA,OAAO,CAACiB,IAAR,CAAa,GAAb;AACD;AACD,eAAenB,GAAG,CAAC,CACjBH,UAAU,CAAC,mBAAD,EAAsB6B,QAAtB,CADO,EAEjB7B,UAAU,CAAC,qBAAD,EAAwBS,KAAxB,CAFO,EAGjBT,UAAU,CAAC,2BAAD,EAA8ByB,UAA9B,CAHO,EAIjBzB,UAAU,CAAC,gBAAD,EAAmB+B,OAAnB,CAJO,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport { toast } from \"react-toastify\";\nimport history from \"../../../services/history\";\nimport api from \"../../../services/api\";\nimport { loginSuccess, loginFailure } from \"./actions\";\n\nexport function* login({ payload }) {\n  console\n  try {\n    const { email, password } = payload;\n    const response = yield call(api.post, \"api/login\", {\n      email,\n      password\n    });\n    const { token, user } = response.data;\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n    yield put(loginSuccess(token, user));\n    history.push(\"/main\");\n  } catch (err) {\n    toast.error(\"Falha na autenticação, verifique seus dados\");\n    yield put(loginFailure());\n  }\n}\nexport function* createUser({ payload }) {\n  try {\n    const { name, email, password, type, cpf } = payload;\n\n    yield call(api.post, \"users\", {\n      name,\n      email,\n      password,\n      type,\n      cpf\n    });\n\n    history.push(\"/\");\n  } catch (err) {\n    toast.error(\"Falha no cadastro, verifique os dados !\");\n\n    yield put(loginFailure());\n  }\n}\n\nexport function setToken({ payload }) {\n  if (!payload) return;\n  const { token } = payload.auth;\n  if (token) {\n    api.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n}\nexport function signOut() {\n  history.push(\"/\");\n}\nexport default all([\n  takeLatest(\"persist/REHYDRATE\", setToken),\n  takeLatest(\"@auth/LOGIN_REQUEST\", login),\n  takeLatest(\"@auth/CREATE_USER_REQUEST\", createUser),\n  takeLatest(\"@auth/SIGN_OUT\", signOut)\n]);\n"]},"metadata":{},"sourceType":"module"}