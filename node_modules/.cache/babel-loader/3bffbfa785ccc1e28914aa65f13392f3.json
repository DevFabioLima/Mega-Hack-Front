{"ast":null,"code":"import { call, select, put, all, takeLatest } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\nimport { addToCartSucess, updateAmountSucess } from './actions';\nimport { formatPrice } from '../../../util/format';\n\nfunction* addToCart({\n  id\n}) {\n  const productExists = yield select(state => state.cart.find(p => p.id === id));\n  const stock = yield call(api.get, `/api/products/${id}`);\n  const stockAmount = stock.data.stock;\n  const currentAmount = productExists ? productExists.amount : 0;\n  const amount = currentAmount + 1;\n\n  if (amount > stockAmount) {\n    toast.error('Produto sem estoque');\n    return;\n  }\n\n  if (productExists) {\n    yield put(updateAmountSucess(id, amount));\n  } else {\n    const response = yield call(api.get, `/api/products/${id}`);\n    const data = { ...response.data,\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price)\n    };\n    yield put(addToCartSucess(data));\n    history.push('/cart');\n  }\n}\n\nfunction* updateAmount({\n  id,\n  amount\n}) {\n  if (amount <= 0) return;\n  const stock = yield call(api.get, `/api/products/${id}`);\n  const stockAmount = stock.data.stock;\n\n  if (amount > stockAmount) {\n    toast.error('Produto sem estoque');\n    return;\n  }\n\n  yield put(updateAmountSucess(id, amount));\n}\n\nfunction* drainOut() {\n  history.push('/main');\n}\n\nexport default all([takeLatest('@cart/ADD_REQUEST', addToCart), takeLatest('@cart/UPDATE_AMOUNT_REQUEST', updateAmount), takeLatest('@cart/PAY_SUCCESS', drainOut)]);","map":{"version":3,"sources":["/Users/fabiolucaslima/Dev/react_order/hirata/src/store/modules/cart/sagas.js"],"names":["call","select","put","all","takeLatest","toast","api","history","addToCartSucess","updateAmountSucess","formatPrice","addToCart","id","productExists","state","cart","find","p","stock","get","stockAmount","data","currentAmount","amount","error","response","priceFormatted","price","push","updateAmount","drainOut"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,UAAjC,QAAmD,oBAAnD;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,eAAT,EAA0BC,kBAA1B,QAAoD,WAApD;AACA,SAASC,WAAT,QAA4B,sBAA5B;;AAEA,UAAUC,SAAV,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA4B;AAC1B,QAAMC,aAAa,GAAG,MAAMZ,MAAM,CAACa,KAAK,IACtCA,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,EAAF,KAASA,EAA9B,CADgC,CAAlC;AAGA,QAAMM,KAAK,GAAG,MAAMlB,IAAI,CAACM,GAAG,CAACa,GAAL,EAAW,iBAAgBP,EAAG,EAA9B,CAAxB;AACA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWH,KAA/B;AACA,QAAMI,aAAa,GAAGT,aAAa,GAAGA,aAAa,CAACU,MAAjB,GAA0B,CAA7D;AACA,QAAMA,MAAM,GAAGD,aAAa,GAAG,CAA/B;;AACA,MAAIC,MAAM,GAAGH,WAAb,EAA0B;AACxBf,IAAAA,KAAK,CAACmB,KAAN,CAAY,qBAAZ;AACA;AACD;;AACD,MAAIX,aAAJ,EAAmB;AACjB,UAAMX,GAAG,CAACO,kBAAkB,CAACG,EAAD,EAAKW,MAAL,CAAnB,CAAT;AACD,GAFD,MAEO;AACL,UAAME,QAAQ,GAAG,MAAMzB,IAAI,CAACM,GAAG,CAACa,GAAL,EAAW,iBAAgBP,EAAG,EAA9B,CAA3B;AACA,UAAMS,IAAI,GAAG,EACX,GAAGI,QAAQ,CAACJ,IADD;AAEXE,MAAAA,MAAM,EAAE,CAFG;AAGXG,MAAAA,cAAc,EAAEhB,WAAW,CAACe,QAAQ,CAACJ,IAAT,CAAcM,KAAf;AAHhB,KAAb;AAKA,UAAMzB,GAAG,CAACM,eAAe,CAACa,IAAD,CAAhB,CAAT;AACAd,IAAAA,OAAO,CAACqB,IAAR,CAAa,OAAb;AACD;AACF;;AAED,UAAUC,YAAV,CAAuB;AAAEjB,EAAAA,EAAF;AAAMW,EAAAA;AAAN,CAAvB,EAAuC;AACrC,MAAIA,MAAM,IAAI,CAAd,EAAiB;AACjB,QAAML,KAAK,GAAG,MAAMlB,IAAI,CAACM,GAAG,CAACa,GAAL,EAAW,iBAAgBP,EAAG,EAA9B,CAAxB;AACA,QAAMQ,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWH,KAA/B;;AACA,MAAIK,MAAM,GAAGH,WAAb,EAA0B;AACxBf,IAAAA,KAAK,CAACmB,KAAN,CAAY,qBAAZ;AACA;AACD;;AACD,QAAMtB,GAAG,CAACO,kBAAkB,CAACG,EAAD,EAAKW,MAAL,CAAnB,CAAT;AACD;;AAED,UAAUO,QAAV,GAAqB;AACnBvB,EAAAA,OAAO,CAACqB,IAAR,CAAa,OAAb;AACD;;AAED,eAAezB,GAAG,CAAC,CACjBC,UAAU,CAAC,mBAAD,EAAsBO,SAAtB,CADO,EAEjBP,UAAU,CAAC,6BAAD,EAAgCyB,YAAhC,CAFO,EAGjBzB,UAAU,CAAC,mBAAD,EAAsB0B,QAAtB,CAHO,CAAD,CAAlB","sourcesContent":["import { call, select, put, all, takeLatest } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\nimport { addToCartSucess, updateAmountSucess } from './actions';\nimport { formatPrice } from '../../../util/format';\n\nfunction* addToCart({ id }) {\n  const productExists = yield select(state =>\n    state.cart.find(p => p.id === id)\n  );\n  const stock = yield call(api.get, `/api/products/${id}`);\n  const stockAmount = stock.data.stock;\n  const currentAmount = productExists ? productExists.amount : 0;\n  const amount = currentAmount + 1;\n  if (amount > stockAmount) {\n    toast.error('Produto sem estoque');\n    return;\n  }\n  if (productExists) {\n    yield put(updateAmountSucess(id, amount));\n  } else {\n    const response = yield call(api.get, `/api/products/${id}`);\n    const data = {\n      ...response.data,\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price),\n    };\n    yield put(addToCartSucess(data));\n    history.push('/cart');\n  }\n}\n\nfunction* updateAmount({ id, amount }) {\n  if (amount <= 0) return;\n  const stock = yield call(api.get, `/api/products/${id}`);\n  const stockAmount = stock.data.stock;\n  if (amount > stockAmount) {\n    toast.error('Produto sem estoque');\n    return;\n  }\n  yield put(updateAmountSucess(id, amount));\n}\n\nfunction* drainOut() {\n  history.push('/main');\n}\n\nexport default all([\n  takeLatest('@cart/ADD_REQUEST', addToCart),\n  takeLatest('@cart/UPDATE_AMOUNT_REQUEST', updateAmount),\n  takeLatest('@cart/PAY_SUCCESS', drainOut),\n]);\n"]},"metadata":{},"sourceType":"module"}